//
//  DTO_Globals.swift
//
//  Automatically created by SwiftDTO.
//

// DO NOT EDIT THIS FILE!
// This file was automatically generated from an xcmodel file (CoreData XML Scheme)
// Please edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public typealias JSOBJ = [String: Any]
public typealias JSARR = [JSOBJ]

public protocol PrettyJson {
    func jsonString(paddingPrefix prefix: String, printNulls: Bool) -> String
}

public protocol DictionaryConvertible: PrettyJson {
    var jsobjRepresentation: JSOBJ { get }
}

public protocol JSOBJSerializable {
    init?(jsonData: JSOBJ?)
}

struct ConversionHelper {
    
    /**
     Convert an NSDate object to a string representing a date in ISO 8601 format (default)
     
     - parameter dateObj: NSDate object
     - parameter format: Format string for date (default is ISO 8601 format)
     
     - returns: String representing a date in the chosen format (default: ISO 8601)
     */
    static func stringFromDate(_ dateObj:Date, withFormat format: String="yyyy-MM-dd'T'HH:mm:ss.sZZZZZ") -> String {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = format
        return dateFormatter.string(from: dateObj)
    }
    
    /**
     Try to convert an Any value to a NSDate object
     
     Try to convert the input to a String, Int or Double and call the corresponding date creator
     
     - parameter dateObj: Any representing a date in either String or Timestamp
     
     - returns: NSDate object corresponding to input
     */
    static func dateFromAny(_ dateObj: Any?) -> Date? {
        let helper = ConversionHelper()
        if let inputString = dateObj as? String { return helper.dateFromString(inputString) }
        if let doubleVal = dateObj as? Double { return helper.dateFromDouble(doubleVal) }
        if let intVal = dateObj as? Int { return helper.dateFromLong(intVal) }
        return nil
    }
    
    /*
     Try to convert a string representing a date to a NSDate object
     
     Start with ISO 8601 format, then our "Conrad German date format", then a timestamp
     
     - parameter dateString: String representing a date in ISO 8601 format
     
     - returns: NSDate object corresponding to input string
     */
    private func dateFromString(_ dateString: String?) -> Date? {
        guard let inputString = dateString else { return nil }
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.ssZZZZZ"
        if let retVal = dateFormatter.date(from: inputString) { return retVal }
        dateFormatter.dateFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ssZZZZZ"
        if let retVal = dateFormatter.date(from: inputString) { return retVal }
        dateFormatter.dateFormat = "dd'-'MM'-'yyyy"
        if let retVal = dateFormatter.date(from: inputString) { return retVal }
        if let doubleVal = Double(inputString) { return dateFromDouble(doubleVal) }
        if let intVal = Int(inputString) { return dateFromLong(intVal) }
        return nil
    }
    
    private func dateFromDouble(_ timestamp: Double?) -> Date? {
        guard let timestamp = timestamp else {
            return nil
        }
        return Date(timeIntervalSince1970: (timestamp/1000.0))
    }
    
    private func dateFromLong(_ timestamp: Int?) -> Date? {
        guard let timestamp = timestamp else {
            return nil
        }
        return Date(timeIntervalSince1970: TimeInterval(timestamp))
    }
}
