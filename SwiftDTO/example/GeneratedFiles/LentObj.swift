//
//  LentObj.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct LentObj: Obj, JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let id: Int?
    public let txtId: String?
    public let type: ObjType?

    public let availFrom: Date?
    public let from: Date?
    public let to: Date?

    // Default initializer:
    public init(id: Int?, txtId: String?, type: ObjType?, availFrom: Date?, from: Date?, to: Date?) {
        self.id = id
        self.txtId = txtId
        self.type = type
        self.availFrom = availFrom
        self.from = from
        self.to = to
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        id = jsonData["id"] as? Int
        txtId = stringFromAny(jsonData["txtId"])
        if let val = ObjType(jsonData: jsonData["type"] as? JSOBJ) { self.type = val }
        else { type = nil }

        availFrom = dateFromAny(jsonData["availFrom"])
        from = dateFromAny(jsonData["from"])
        to = dateFromAny(jsonData["to"])

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "LentObj")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["id", "txtId", "type", "availFrom", "from", "to"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if id != nil { jsonData["id"] = id! }
        if txtId != nil { jsonData["txtId"] = txtId! }
        if type != nil { jsonData["type"] = type!.jsobjRepresentation }

        if availFrom != nil { jsonData["availFrom"] = stringFromDate(availFrom!) }
        if from != nil { jsonData["from"] = stringFromDate(from!) }
        if to != nil { jsonData["to"] = stringFromDate(to!) }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let id = id { returnString.append("    \(prefix)\"id\": \(id),\n") }
        else if printNulls { returnString.append("    \(prefix)\"id\": null,\n") }

        if let txtId = txtId { returnString.append("    \(prefix)\"txtId\": \"\(txtId)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"txtId\": null,\n") }

        if let type = type { returnString.append("    \(prefix)\"type\": \("\(type.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"type\": null,\n") }

        if let availFrom = availFrom { returnString.append("    \(prefix)\"availFrom\": \"\(stringFromDate(availFrom))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"availFrom\": null,\n") }

        if let from = from { returnString.append("    \(prefix)\"from\": \"\(stringFromDate(from))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"from\": null,\n") }

        if let to = to { returnString.append("    \(prefix)\"to\": \"\(stringFromDate(to))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"to\": null,\n") }


        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}