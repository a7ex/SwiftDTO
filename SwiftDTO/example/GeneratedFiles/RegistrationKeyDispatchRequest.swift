//
//  RegistrationKeyDispatchRequest.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct RegistrationKeyDispatchRequest: SessionRequest, DefaultRequest, JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let session: String?
    public let locale: String?

    public let noOfRegKeys: Int?
    public let qtyPerRegKey: Int?
    public let rcpts: String?
    public let rcptsInBcc: String?
    public let rcptsInCc: String?

    // Default initializer:
    public init(session: String?, locale: String?, noOfRegKeys: Int?, qtyPerRegKey: Int?, rcpts: String?, rcptsInBcc: String?, rcptsInCc: String?) {
        self.session = session
        self.locale = locale
        self.noOfRegKeys = noOfRegKeys
        self.qtyPerRegKey = qtyPerRegKey
        self.rcpts = rcpts
        self.rcptsInBcc = rcptsInBcc
        self.rcptsInCc = rcptsInCc
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        session = stringFromAny(jsonData["session"])
        locale = stringFromAny(jsonData["locale"])

        noOfRegKeys = jsonData["noOfRegKeys"] as? Int
        qtyPerRegKey = jsonData["qtyPerRegKey"] as? Int
        rcpts = stringFromAny(jsonData["rcpts"])
        rcptsInBcc = stringFromAny(jsonData["rcptsInBcc"])
        rcptsInCc = stringFromAny(jsonData["rcptsInCc"])

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "RegistrationKeyDispatchRequest")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["session", "locale", "noOfRegKeys", "qtyPerRegKey", "rcpts", "rcptsInBcc", "rcptsInCc"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if session != nil { jsonData["session"] = session! }
        if locale != nil { jsonData["locale"] = locale! }

        if noOfRegKeys != nil { jsonData["noOfRegKeys"] = noOfRegKeys! }
        if qtyPerRegKey != nil { jsonData["qtyPerRegKey"] = qtyPerRegKey! }
        if rcpts != nil { jsonData["rcpts"] = rcpts! }
        if rcptsInBcc != nil { jsonData["rcptsInBcc"] = rcptsInBcc! }
        if rcptsInCc != nil { jsonData["rcptsInCc"] = rcptsInCc! }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let session = session { returnString.append("    \(prefix)\"session\": \"\(session)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"session\": null,\n") }

        if let locale = locale { returnString.append("    \(prefix)\"locale\": \"\(locale)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"locale\": null,\n") }

        if let noOfRegKeys = noOfRegKeys { returnString.append("    \(prefix)\"noOfRegKeys\": \(noOfRegKeys),\n") }
        else if printNulls { returnString.append("    \(prefix)\"noOfRegKeys\": null,\n") }

        if let qtyPerRegKey = qtyPerRegKey { returnString.append("    \(prefix)\"qtyPerRegKey\": \(qtyPerRegKey),\n") }
        else if printNulls { returnString.append("    \(prefix)\"qtyPerRegKey\": null,\n") }

        if let rcpts = rcpts { returnString.append("    \(prefix)\"rcpts\": \"\(rcpts)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"rcpts\": null,\n") }

        if let rcptsInBcc = rcptsInBcc { returnString.append("    \(prefix)\"rcptsInBcc\": \"\(rcptsInBcc)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"rcptsInBcc\": null,\n") }

        if let rcptsInCc = rcptsInCc { returnString.append("    \(prefix)\"rcptsInCc\": \"\(rcptsInCc)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"rcptsInCc\": null,\n") }

        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}
