//
//  PersonalData.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct PersonalData: Person, JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let email: String?
    public let firstName: String?
    public let id: Int?
    public let lastName: String?

    public let accessForAdmPersAllowed: Bool?
    public let assignedRoles: Role?
    public let birthday: Date?
    public let city: String?
    public let deleteSensDataAfterCampaign: Bool?
    public let employer: Company?
    public let gender: Bool?
    public let highestGrad: Graduation?
    public let houseNo: String?
    public let householdComposition: AgeGroupPerHousehold?
    public let landlineNo: String?
    public let mobilePhoneNo: String?
    public let motorVehAvailable: Bool?
    public let occ: Occupation?
    public let prefTfcModes: TrafficMode?
    public let ptSubscriptionAvailable: Bool?
    public let salaryLvl: SalaryLevel?
    public let street: String?
    public let uploadSensDataByWifiOnly: Bool?
    public let zipCode: String?

    // Default initializer:
    public init(email: String?, firstName: String?, id: Int?, lastName: String?, accessForAdmPersAllowed: Bool?, assignedRoles: Role?, birthday: Date?, city: String?, deleteSensDataAfterCampaign: Bool?, employer: Company?, gender: Bool?, highestGrad: Graduation?, houseNo: String?, householdComposition: AgeGroupPerHousehold?, landlineNo: String?, mobilePhoneNo: String?, motorVehAvailable: Bool?, occ: Occupation?, prefTfcModes: TrafficMode?, ptSubscriptionAvailable: Bool?, salaryLvl: SalaryLevel?, street: String?, uploadSensDataByWifiOnly: Bool?, zipCode: String?) {
        self.email = email
        self.firstName = firstName
        self.id = id
        self.lastName = lastName
        self.accessForAdmPersAllowed = accessForAdmPersAllowed
        self.assignedRoles = assignedRoles
        self.birthday = birthday
        self.city = city
        self.deleteSensDataAfterCampaign = deleteSensDataAfterCampaign
        self.employer = employer
        self.gender = gender
        self.highestGrad = highestGrad
        self.houseNo = houseNo
        self.householdComposition = householdComposition
        self.landlineNo = landlineNo
        self.mobilePhoneNo = mobilePhoneNo
        self.motorVehAvailable = motorVehAvailable
        self.occ = occ
        self.prefTfcModes = prefTfcModes
        self.ptSubscriptionAvailable = ptSubscriptionAvailable
        self.salaryLvl = salaryLvl
        self.street = street
        self.uploadSensDataByWifiOnly = uploadSensDataByWifiOnly
        self.zipCode = zipCode
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        email = stringFromAny(jsonData["email"])
        firstName = stringFromAny(jsonData["firstName"])
        id = jsonData["id"] as? Int
        lastName = stringFromAny(jsonData["lastName"])

        accessForAdmPersAllowed = boolFromAny(jsonData["accessForAdmPersAllowed"])
        if let val = Role(jsonData: jsonData["assignedRoles"] as? JSOBJ) { self.assignedRoles = val }
        else { assignedRoles = nil }
        birthday = dateFromAny(jsonData["birthday"])
        city = stringFromAny(jsonData["city"])
        deleteSensDataAfterCampaign = boolFromAny(jsonData["deleteSensDataAfterCampaign"])
        if let val = Company(jsonData: jsonData["employer"] as? JSOBJ) { self.employer = val }
        else { employer = nil }
        gender = boolFromAny(jsonData["gender"])
        if let val = Graduation(jsonData: jsonData["highestGrad"] as? JSOBJ) { self.highestGrad = val }
        else { highestGrad = nil }
        houseNo = stringFromAny(jsonData["houseNo"])
        if let val = AgeGroupPerHousehold(jsonData: jsonData["householdComposition"] as? JSOBJ) { self.householdComposition = val }
        else { householdComposition = nil }
        landlineNo = stringFromAny(jsonData["landlineNo"])
        mobilePhoneNo = stringFromAny(jsonData["mobilePhoneNo"])
        motorVehAvailable = boolFromAny(jsonData["motorVehAvailable"])
        if let val = Occupation(jsonData: jsonData["occ"] as? JSOBJ) { self.occ = val }
        else { occ = nil }
        if let val = TrafficMode(jsonData: jsonData["prefTfcModes"] as? JSOBJ) { self.prefTfcModes = val }
        else { prefTfcModes = nil }
        ptSubscriptionAvailable = boolFromAny(jsonData["ptSubscriptionAvailable"])
        if let val = SalaryLevel(jsonData: jsonData["salaryLvl"] as? JSOBJ) { self.salaryLvl = val }
        else { salaryLvl = nil }
        street = stringFromAny(jsonData["street"])
        uploadSensDataByWifiOnly = boolFromAny(jsonData["uploadSensDataByWifiOnly"])
        zipCode = stringFromAny(jsonData["zipCode"])

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "PersonalData")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["email", "firstName", "id", "lastName", "accessForAdmPersAllowed", "assignedRoles", "birthday", "city", "deleteSensDataAfterCampaign", "employer", "gender", "highestGrad", "houseNo", "householdComposition", "landlineNo", "mobilePhoneNo", "motorVehAvailable", "occ", "prefTfcModes", "ptSubscriptionAvailable", "salaryLvl", "street", "uploadSensDataByWifiOnly", "zipCode"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if email != nil { jsonData["email"] = email! }
        if firstName != nil { jsonData["firstName"] = firstName! }
        if id != nil { jsonData["id"] = id! }
        if lastName != nil { jsonData["lastName"] = lastName! }

        if accessForAdmPersAllowed != nil { jsonData["accessForAdmPersAllowed"] = accessForAdmPersAllowed! }
        if assignedRoles != nil { jsonData["assignedRoles"] = assignedRoles!.jsobjRepresentation }
        if birthday != nil { jsonData["birthday"] = stringFromDate(birthday!) }
        if city != nil { jsonData["city"] = city! }
        if deleteSensDataAfterCampaign != nil { jsonData["deleteSensDataAfterCampaign"] = deleteSensDataAfterCampaign! }
        if employer != nil { jsonData["employer"] = employer!.jsobjRepresentation }
        if gender != nil { jsonData["gender"] = gender! }
        if highestGrad != nil { jsonData["highestGrad"] = highestGrad!.jsobjRepresentation }
        if houseNo != nil { jsonData["houseNo"] = houseNo! }
        if householdComposition != nil { jsonData["householdComposition"] = householdComposition!.jsobjRepresentation }
        if landlineNo != nil { jsonData["landlineNo"] = landlineNo! }
        if mobilePhoneNo != nil { jsonData["mobilePhoneNo"] = mobilePhoneNo! }
        if motorVehAvailable != nil { jsonData["motorVehAvailable"] = motorVehAvailable! }
        if occ != nil { jsonData["occ"] = occ!.jsobjRepresentation }
        if prefTfcModes != nil { jsonData["prefTfcModes"] = prefTfcModes!.jsobjRepresentation }
        if ptSubscriptionAvailable != nil { jsonData["ptSubscriptionAvailable"] = ptSubscriptionAvailable! }
        if salaryLvl != nil { jsonData["salaryLvl"] = salaryLvl!.jsobjRepresentation }
        if street != nil { jsonData["street"] = street! }
        if uploadSensDataByWifiOnly != nil { jsonData["uploadSensDataByWifiOnly"] = uploadSensDataByWifiOnly! }
        if zipCode != nil { jsonData["zipCode"] = zipCode! }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let email = email { returnString.append("    \(prefix)\"email\": \"\(email)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"email\": null,\n") }

        if let firstName = firstName { returnString.append("    \(prefix)\"firstName\": \"\(firstName)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"firstName\": null,\n") }

        if let id = id { returnString.append("    \(prefix)\"id\": \(id),\n") }
        else if printNulls { returnString.append("    \(prefix)\"id\": null,\n") }

        if let lastName = lastName { returnString.append("    \(prefix)\"lastName\": \"\(lastName)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"lastName\": null,\n") }

        if let accessForAdmPersAllowed = accessForAdmPersAllowed { returnString.append("    \(prefix)\"accessForAdmPersAllowed\": \(accessForAdmPersAllowed),\n") }
        else if printNulls { returnString.append("    \(prefix)\"accessForAdmPersAllowed\": null,\n") }

        if let assignedRoles = assignedRoles { returnString.append("    \(prefix)\"assignedRoles\": \("\(assignedRoles.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"assignedRoles\": null,\n") }

        if let birthday = birthday { returnString.append("    \(prefix)\"birthday\": \"\(stringFromDate(birthday))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"birthday\": null,\n") }

        if let city = city { returnString.append("    \(prefix)\"city\": \"\(city)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"city\": null,\n") }

        if let deleteSensDataAfterCampaign = deleteSensDataAfterCampaign { returnString.append("    \(prefix)\"deleteSensDataAfterCampaign\": \(deleteSensDataAfterCampaign),\n") }
        else if printNulls { returnString.append("    \(prefix)\"deleteSensDataAfterCampaign\": null,\n") }

        if let employer = employer { returnString.append("    \(prefix)\"employer\": \("\(employer.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"employer\": null,\n") }

        if let gender = gender { returnString.append("    \(prefix)\"gender\": \(gender),\n") }
        else if printNulls { returnString.append("    \(prefix)\"gender\": null,\n") }

        if let highestGrad = highestGrad { returnString.append("    \(prefix)\"highestGrad\": \("\(highestGrad.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"highestGrad\": null,\n") }

        if let houseNo = houseNo { returnString.append("    \(prefix)\"houseNo\": \"\(houseNo)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"houseNo\": null,\n") }

        if let householdComposition = householdComposition { returnString.append("    \(prefix)\"householdComposition\": \("\(householdComposition.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"householdComposition\": null,\n") }

        if let landlineNo = landlineNo { returnString.append("    \(prefix)\"landlineNo\": \"\(landlineNo)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"landlineNo\": null,\n") }

        if let mobilePhoneNo = mobilePhoneNo { returnString.append("    \(prefix)\"mobilePhoneNo\": \"\(mobilePhoneNo)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"mobilePhoneNo\": null,\n") }

        if let motorVehAvailable = motorVehAvailable { returnString.append("    \(prefix)\"motorVehAvailable\": \(motorVehAvailable),\n") }
        else if printNulls { returnString.append("    \(prefix)\"motorVehAvailable\": null,\n") }

        if let occ = occ { returnString.append("    \(prefix)\"occ\": \("\(occ.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"occ\": null,\n") }

        if let prefTfcModes = prefTfcModes { returnString.append("    \(prefix)\"prefTfcModes\": \("\(prefTfcModes.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"prefTfcModes\": null,\n") }

        if let ptSubscriptionAvailable = ptSubscriptionAvailable { returnString.append("    \(prefix)\"ptSubscriptionAvailable\": \(ptSubscriptionAvailable),\n") }
        else if printNulls { returnString.append("    \(prefix)\"ptSubscriptionAvailable\": null,\n") }

        if let salaryLvl = salaryLvl { returnString.append("    \(prefix)\"salaryLvl\": \("\(salaryLvl.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"salaryLvl\": null,\n") }

        if let street = street { returnString.append("    \(prefix)\"street\": \"\(street)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"street\": null,\n") }

        if let uploadSensDataByWifiOnly = uploadSensDataByWifiOnly { returnString.append("    \(prefix)\"uploadSensDataByWifiOnly\": \(uploadSensDataByWifiOnly),\n") }
        else if printNulls { returnString.append("    \(prefix)\"uploadSensDataByWifiOnly\": null,\n") }

        if let zipCode = zipCode { returnString.append("    \(prefix)\"zipCode\": \"\(zipCode)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"zipCode\": null,\n") }


        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}