//
//  TrackingData.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct TrackingData: GeographicPosition, JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let lat: Double?
    public let lon: Double?

    public let accy: Int?
    public let alt: Int?
    public let brg: Double?
    public let spd: Double?
    public let ts: Date?

    // Default initializer:
    public init(lat: Double?, lon: Double?, accy: Int?, alt: Int?, brg: Double?, spd: Double?, ts: Date?) {
        self.lat = lat
        self.lon = lon
        self.accy = accy
        self.alt = alt
        self.brg = brg
        self.spd = spd
        self.ts = ts
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        lat = jsonData["lat"] as? Double
        lon = jsonData["lon"] as? Double

        accy = jsonData["accy"] as? Int
        alt = jsonData["alt"] as? Int
        brg = jsonData["brg"] as? Double
        spd = jsonData["spd"] as? Double
        ts = dateFromAny(jsonData["ts"])

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "TrackingData")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["lat", "lon", "accy", "alt", "brg", "spd", "ts"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if lat != nil { jsonData["lat"] = lat! }
        if lon != nil { jsonData["lon"] = lon! }

        if accy != nil { jsonData["accy"] = accy! }
        if alt != nil { jsonData["alt"] = alt! }
        if brg != nil { jsonData["brg"] = brg! }
        if spd != nil { jsonData["spd"] = spd! }
        if ts != nil { jsonData["ts"] = stringFromDate(ts!) }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let lat = lat { returnString.append("    \(prefix)\"lat\": \(lat),\n") }
        else if printNulls { returnString.append("    \(prefix)\"lat\": null,\n") }

        if let lon = lon { returnString.append("    \(prefix)\"lon\": \(lon),\n") }
        else if printNulls { returnString.append("    \(prefix)\"lon\": null,\n") }

        if let accy = accy { returnString.append("    \(prefix)\"accy\": \(accy),\n") }
        else if printNulls { returnString.append("    \(prefix)\"accy\": null,\n") }

        if let alt = alt { returnString.append("    \(prefix)\"alt\": \(alt),\n") }
        else if printNulls { returnString.append("    \(prefix)\"alt\": null,\n") }

        if let brg = brg { returnString.append("    \(prefix)\"brg\": \(brg),\n") }
        else if printNulls { returnString.append("    \(prefix)\"brg\": null,\n") }

        if let spd = spd { returnString.append("    \(prefix)\"spd\": \(spd),\n") }
        else if printNulls { returnString.append("    \(prefix)\"spd\": null,\n") }

        if let ts = ts { returnString.append("    \(prefix)\"ts\": \"\(stringFromDate(ts))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"ts\": null,\n") }


        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}