//
//  GetPoisResponse.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct GetPoisResponse: SessionResponse, JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let sessionValidityDate: Date?

    public let pois: Poi?

    // Default initializer:
    public init(sessionValidityDate: Date?, pois: Poi?) {
        self.sessionValidityDate = sessionValidityDate
        self.pois = pois
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        sessionValidityDate = dateFromAny(jsonData["sessionValidityDate"])

        if let val = Poi(jsonData: jsonData["pois"] as? JSOBJ) { self.pois = val }
        else { pois = nil }

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "GetPoisResponse")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["sessionValidityDate", "pois"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if sessionValidityDate != nil { jsonData["sessionValidityDate"] = stringFromDate(sessionValidityDate!) }

        if pois != nil { jsonData["pois"] = pois!.jsobjRepresentation }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let sessionValidityDate = sessionValidityDate { returnString.append("    \(prefix)\"sessionValidityDate\": \"\(stringFromDate(sessionValidityDate))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"sessionValidityDate\": null,\n") }

        if let pois = pois { returnString.append("    \(prefix)\"pois\": \("\(pois.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"pois\": null,\n") }

        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}
