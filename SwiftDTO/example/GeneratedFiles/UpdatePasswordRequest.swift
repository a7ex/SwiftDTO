//
//  UpdatePasswordRequest.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct UpdatePasswordRequest: SessionRequest, JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let session: String?

    public let currentPassword: String?
    public let newPassword: String?

    // Default initializer:
    public init(session: String?, currentPassword: String?, newPassword: String?) {
        self.session = session
        self.currentPassword = currentPassword
        self.newPassword = newPassword
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        session = stringFromAny(jsonData["session"])

        currentPassword = stringFromAny(jsonData["currentPassword"])
        newPassword = stringFromAny(jsonData["newPassword"])

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "UpdatePasswordRequest")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["session", "currentPassword", "newPassword"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if session != nil { jsonData["session"] = session! }

        if currentPassword != nil { jsonData["currentPassword"] = currentPassword! }
        if newPassword != nil { jsonData["newPassword"] = newPassword! }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let session = session { returnString.append("    \(prefix)\"session\": \"\(session)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"session\": null,\n") }

        if let currentPassword = currentPassword { returnString.append("    \(prefix)\"currentPassword\": \"\(currentPassword)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"currentPassword\": null,\n") }

        if let newPassword = newPassword { returnString.append("    \(prefix)\"newPassword\": \"\(newPassword)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"newPassword\": null,\n") }

        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}
