//
//  TravelStatisticPerTrafficMode.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct TravelStatisticPerTrafficMode: TravelStatistic, JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let no: Int?
    public let travelTime: Int?
    public let travelledDist: Int?

    public let tfcMode: TrafficMode?

    // Default initializer:
    public init(no: Int?, travelTime: Int?, travelledDist: Int?, tfcMode: TrafficMode?) {
        self.no = no
        self.travelTime = travelTime
        self.travelledDist = travelledDist
        self.tfcMode = tfcMode
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        no = jsonData["no"] as? Int
        travelTime = jsonData["travelTime"] as? Int
        travelledDist = jsonData["travelledDist"] as? Int

        if let val = TrafficMode(jsonData: jsonData["tfcMode"] as? JSOBJ) { self.tfcMode = val }
        else { tfcMode = nil }

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "TravelStatisticPerTrafficMode")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["no", "travelTime", "travelledDist", "tfcMode"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if no != nil { jsonData["no"] = no! }
        if travelTime != nil { jsonData["travelTime"] = travelTime! }
        if travelledDist != nil { jsonData["travelledDist"] = travelledDist! }

        if tfcMode != nil { jsonData["tfcMode"] = tfcMode!.jsobjRepresentation }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let no = no { returnString.append("    \(prefix)\"no\": \(no),\n") }
        else if printNulls { returnString.append("    \(prefix)\"no\": null,\n") }

        if let travelTime = travelTime { returnString.append("    \(prefix)\"travelTime\": \(travelTime),\n") }
        else if printNulls { returnString.append("    \(prefix)\"travelTime\": null,\n") }

        if let travelledDist = travelledDist { returnString.append("    \(prefix)\"travelledDist\": \(travelledDist),\n") }
        else if printNulls { returnString.append("    \(prefix)\"travelledDist\": null,\n") }

        if let tfcMode = tfcMode { returnString.append("    \(prefix)\"tfcMode\": \("\(tfcMode.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"tfcMode\": null,\n") }


        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}