//
//  Poi.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct Poi: GeographicPosition, JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let lat: Double?
    public let lon: Double?

    public let creationDate: Date?
    public let desc: String?
    public let id: Int?
    public let name: String?
    public let tripPurpose: TripPurpose?

    // Default initializer:
    public init(lat: Double?, lon: Double?, creationDate: Date?, desc: String?, id: Int?, name: String?, tripPurpose: TripPurpose?) {
        self.lat = lat
        self.lon = lon
        self.creationDate = creationDate
        self.desc = desc
        self.id = id
        self.name = name
        self.tripPurpose = tripPurpose
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        lat = jsonData["lat"] as? Double
        lon = jsonData["lon"] as? Double

        creationDate = dateFromAny(jsonData["creationDate"])
        desc = stringFromAny(jsonData["desc"])
        id = jsonData["id"] as? Int
        name = stringFromAny(jsonData["name"])
        if let val = TripPurpose(jsonData: jsonData["tripPurpose"] as? JSOBJ) { self.tripPurpose = val }
        else { tripPurpose = nil }

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "Poi")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["lat", "lon", "creationDate", "desc", "id", "name", "tripPurpose"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if lat != nil { jsonData["lat"] = lat! }
        if lon != nil { jsonData["lon"] = lon! }

        if creationDate != nil { jsonData["creationDate"] = stringFromDate(creationDate!) }
        if desc != nil { jsonData["desc"] = desc! }
        if id != nil { jsonData["id"] = id! }
        if name != nil { jsonData["name"] = name! }
        if tripPurpose != nil { jsonData["tripPurpose"] = tripPurpose!.jsobjRepresentation }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let lat = lat { returnString.append("    \(prefix)\"lat\": \(lat),\n") }
        else if printNulls { returnString.append("    \(prefix)\"lat\": null,\n") }

        if let lon = lon { returnString.append("    \(prefix)\"lon\": \(lon),\n") }
        else if printNulls { returnString.append("    \(prefix)\"lon\": null,\n") }

        if let creationDate = creationDate { returnString.append("    \(prefix)\"creationDate\": \"\(stringFromDate(creationDate))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"creationDate\": null,\n") }

        if let desc = desc { returnString.append("    \(prefix)\"desc\": \"\(desc)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"desc\": null,\n") }

        if let id = id { returnString.append("    \(prefix)\"id\": \(id),\n") }
        else if printNulls { returnString.append("    \(prefix)\"id\": null,\n") }

        if let name = name { returnString.append("    \(prefix)\"name\": \"\(name)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"name\": null,\n") }

        if let tripPurpose = tripPurpose { returnString.append("    \(prefix)\"tripPurpose\": \("\(tripPurpose.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"tripPurpose\": null,\n") }


        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}