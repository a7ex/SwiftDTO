//
//  Dino.swift
//  conradkiosk
//
//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct Dino: Animal, JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let name: String
    public let animalType: AnimalType?

    public let tailSize: Int?

    // Default initializer:
    public init(name: String, animalType: AnimalType?, tailSize: Int?) {
        self.name = name
        self.animalType = animalType
        self.tailSize = tailSize
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        guard let val = ConversionHelper.stringFromAny(jsonData["name"]) else { return  nil }
        self.name = val
        if let val = AnimalType.byString(jsonData["animalType"] as? String) { self.animalType = val }
        else { animalType = nil }

        tailSize = jsonData["tailSize"] as? Int ?? 0

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "Dino")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["name", "animalType", "tailSize"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        jsonData["name"] = name
        if animalType != nil { jsonData["animalType"] = animalType!.rawValue }

        if tailSize != nil { jsonData["tailSize"] = tailSize! }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        returnString.append("    \(prefix)\"name\": \"\(name)\",\n")
        if let animalType = animalType { returnString.append("    \(prefix)\"animalType\": \("\"\(animalType.rawValue)\""),\n") }
        else if printNulls { returnString.append("    \(prefix)\"animalType\": null,\n") }

        if let tailSize = tailSize { returnString.append("    \(prefix)\"tailSize\": \(tailSize),\n") }
        else if printNulls { returnString.append("    \(prefix)\"tailSize\": null,\n") }

        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}
