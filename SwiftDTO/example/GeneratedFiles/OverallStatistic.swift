//
//  OverallStatistic.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct OverallStatistic: TravelStatistic, JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let no: Int?
    public let travelTime: Int?
    public let travelledDist: Int?

    public let noOfCurrentlyParticipatingCompanies: Int?
    public let noOfCurrentlyParticipatingPers: Int?
    public let noOfExistingObjs: Int?
    public let noOfParticipatingCompanies: Int?
    public let noOfParticipatingPers: Int?
    public let noOfUsedObjsToday: Int?

    // Default initializer:
    public init(no: Int?, travelTime: Int?, travelledDist: Int?, noOfCurrentlyParticipatingCompanies: Int?, noOfCurrentlyParticipatingPers: Int?, noOfExistingObjs: Int?, noOfParticipatingCompanies: Int?, noOfParticipatingPers: Int?, noOfUsedObjsToday: Int?) {
        self.no = no
        self.travelTime = travelTime
        self.travelledDist = travelledDist
        self.noOfCurrentlyParticipatingCompanies = noOfCurrentlyParticipatingCompanies
        self.noOfCurrentlyParticipatingPers = noOfCurrentlyParticipatingPers
        self.noOfExistingObjs = noOfExistingObjs
        self.noOfParticipatingCompanies = noOfParticipatingCompanies
        self.noOfParticipatingPers = noOfParticipatingPers
        self.noOfUsedObjsToday = noOfUsedObjsToday
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        no = jsonData["no"] as? Int
        travelTime = jsonData["travelTime"] as? Int
        travelledDist = jsonData["travelledDist"] as? Int

        noOfCurrentlyParticipatingCompanies = jsonData["noOfCurrentlyParticipatingCompanies"] as? Int
        noOfCurrentlyParticipatingPers = jsonData["noOfCurrentlyParticipatingPers"] as? Int
        noOfExistingObjs = jsonData["noOfExistingObjs"] as? Int
        noOfParticipatingCompanies = jsonData["noOfParticipatingCompanies"] as? Int
        noOfParticipatingPers = jsonData["noOfParticipatingPers"] as? Int
        noOfUsedObjsToday = jsonData["noOfUsedObjsToday"] as? Int

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "OverallStatistic")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["no", "travelTime", "travelledDist", "noOfCurrentlyParticipatingCompanies", "noOfCurrentlyParticipatingPers", "noOfExistingObjs", "noOfParticipatingCompanies", "noOfParticipatingPers", "noOfUsedObjsToday"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if no != nil { jsonData["no"] = no! }
        if travelTime != nil { jsonData["travelTime"] = travelTime! }
        if travelledDist != nil { jsonData["travelledDist"] = travelledDist! }

        if noOfCurrentlyParticipatingCompanies != nil { jsonData["noOfCurrentlyParticipatingCompanies"] = noOfCurrentlyParticipatingCompanies! }
        if noOfCurrentlyParticipatingPers != nil { jsonData["noOfCurrentlyParticipatingPers"] = noOfCurrentlyParticipatingPers! }
        if noOfExistingObjs != nil { jsonData["noOfExistingObjs"] = noOfExistingObjs! }
        if noOfParticipatingCompanies != nil { jsonData["noOfParticipatingCompanies"] = noOfParticipatingCompanies! }
        if noOfParticipatingPers != nil { jsonData["noOfParticipatingPers"] = noOfParticipatingPers! }
        if noOfUsedObjsToday != nil { jsonData["noOfUsedObjsToday"] = noOfUsedObjsToday! }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let no = no { returnString.append("    \(prefix)\"no\": \(no),\n") }
        else if printNulls { returnString.append("    \(prefix)\"no\": null,\n") }

        if let travelTime = travelTime { returnString.append("    \(prefix)\"travelTime\": \(travelTime),\n") }
        else if printNulls { returnString.append("    \(prefix)\"travelTime\": null,\n") }

        if let travelledDist = travelledDist { returnString.append("    \(prefix)\"travelledDist\": \(travelledDist),\n") }
        else if printNulls { returnString.append("    \(prefix)\"travelledDist\": null,\n") }

        if let noOfCurrentlyParticipatingCompanies = noOfCurrentlyParticipatingCompanies { returnString.append("    \(prefix)\"noOfCurrentlyParticipatingCompanies\": \(noOfCurrentlyParticipatingCompanies),\n") }
        else if printNulls { returnString.append("    \(prefix)\"noOfCurrentlyParticipatingCompanies\": null,\n") }

        if let noOfCurrentlyParticipatingPers = noOfCurrentlyParticipatingPers { returnString.append("    \(prefix)\"noOfCurrentlyParticipatingPers\": \(noOfCurrentlyParticipatingPers),\n") }
        else if printNulls { returnString.append("    \(prefix)\"noOfCurrentlyParticipatingPers\": null,\n") }

        if let noOfExistingObjs = noOfExistingObjs { returnString.append("    \(prefix)\"noOfExistingObjs\": \(noOfExistingObjs),\n") }
        else if printNulls { returnString.append("    \(prefix)\"noOfExistingObjs\": null,\n") }

        if let noOfParticipatingCompanies = noOfParticipatingCompanies { returnString.append("    \(prefix)\"noOfParticipatingCompanies\": \(noOfParticipatingCompanies),\n") }
        else if printNulls { returnString.append("    \(prefix)\"noOfParticipatingCompanies\": null,\n") }

        if let noOfParticipatingPers = noOfParticipatingPers { returnString.append("    \(prefix)\"noOfParticipatingPers\": \(noOfParticipatingPers),\n") }
        else if printNulls { returnString.append("    \(prefix)\"noOfParticipatingPers\": null,\n") }

        if let noOfUsedObjsToday = noOfUsedObjsToday { returnString.append("    \(prefix)\"noOfUsedObjsToday\": \(noOfUsedObjsToday),\n") }
        else if printNulls { returnString.append("    \(prefix)\"noOfUsedObjsToday\": null,\n") }


        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}