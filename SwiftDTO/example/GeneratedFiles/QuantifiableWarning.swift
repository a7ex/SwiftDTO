//
//  QuantifiableWarning.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct QuantifiableWarning: JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let no: Int
    public let wrng: Warning?

    // Default initializer:
    public init(no: Int, wrng: Warning?) {
        self.no = no
        self.wrng = wrng
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        guard let val = jsonData["no"] as? Int else { return  nil }
        self.no = val
        if let val = Warning.byString(jsonData["wrng"] as? String) { self.wrng = val }
        else { wrng = nil }

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "QuantifiableWarning")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["no", "wrng"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        jsonData["no"] = no
        if wrng != nil { jsonData["wrng"] = wrng!.rawValue }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        returnString.append("    \(prefix)\"no\": \(no),\n")
        if let wrng = wrng { returnString.append("    \(prefix)\"wrng\": \("\"\(wrng.rawValue)\""),\n") }
        else if printNulls { returnString.append("    \(prefix)\"wrng\": null,\n") }

        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}