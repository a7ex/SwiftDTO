//
//  Track.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct Track: JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let admPers: Person?
    public let createdAutomatically: Bool?
    public let creationTime: Date?
    public let id: Int?
    public let modTime: Date?
    public let name: String?
    public let segments: Segment?
    public let tripPurpose: TripPurpose?

    // Default initializer:
    public init(admPers: Person?, createdAutomatically: Bool?, creationTime: Date?, id: Int?, modTime: Date?, name: String?, segments: Segment?, tripPurpose: TripPurpose?) {
        self.admPers = admPers
        self.createdAutomatically = createdAutomatically
        self.creationTime = creationTime
        self.id = id
        self.modTime = modTime
        self.name = name
        self.segments = segments
        self.tripPurpose = tripPurpose
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        if let val = PersonalData(jsonData: jsonData["admPers"] as? JSOBJ) { self.admPers = val }
        else { admPers = nil }
        createdAutomatically = boolFromAny(jsonData["createdAutomatically"])
        creationTime = dateFromAny(jsonData["creationTime"])
        id = jsonData["id"] as? Int
        modTime = dateFromAny(jsonData["modTime"])
        name = stringFromAny(jsonData["name"])
        if let val = Segment(jsonData: jsonData["segments"] as? JSOBJ) { self.segments = val }
        else { segments = nil }
        if let val = TripPurpose(jsonData: jsonData["tripPurpose"] as? JSOBJ) { self.tripPurpose = val }
        else { tripPurpose = nil }

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "Track")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["admPers", "createdAutomatically", "creationTime", "id", "modTime", "name", "segments", "tripPurpose"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if admPers != nil { jsonData["admPers"] = admPers!.jsobjRepresentation }
        if createdAutomatically != nil { jsonData["createdAutomatically"] = createdAutomatically! }
        if creationTime != nil { jsonData["creationTime"] = stringFromDate(creationTime!) }
        if id != nil { jsonData["id"] = id! }
        if modTime != nil { jsonData["modTime"] = stringFromDate(modTime!) }
        if name != nil { jsonData["name"] = name! }
        if segments != nil { jsonData["segments"] = segments!.jsobjRepresentation }
        if tripPurpose != nil { jsonData["tripPurpose"] = tripPurpose!.jsobjRepresentation }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let admPers = admPers { returnString.append("    \(prefix)\"admPers\": \("\(admPers.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"admPers\": null,\n") }

        if let createdAutomatically = createdAutomatically { returnString.append("    \(prefix)\"createdAutomatically\": \(createdAutomatically),\n") }
        else if printNulls { returnString.append("    \(prefix)\"createdAutomatically\": null,\n") }

        if let creationTime = creationTime { returnString.append("    \(prefix)\"creationTime\": \"\(stringFromDate(creationTime))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"creationTime\": null,\n") }

        if let id = id { returnString.append("    \(prefix)\"id\": \(id),\n") }
        else if printNulls { returnString.append("    \(prefix)\"id\": null,\n") }

        if let modTime = modTime { returnString.append("    \(prefix)\"modTime\": \"\(stringFromDate(modTime))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"modTime\": null,\n") }

        if let name = name { returnString.append("    \(prefix)\"name\": \"\(name)\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"name\": null,\n") }

        if let segments = segments { returnString.append("    \(prefix)\"segments\": \("\(segments.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"segments\": null,\n") }

        if let tripPurpose = tripPurpose { returnString.append("    \(prefix)\"tripPurpose\": \("\(tripPurpose.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"tripPurpose\": null,\n") }


        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}