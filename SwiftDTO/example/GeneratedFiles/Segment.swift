//
//  Segment.swift

//  Automatically created by SwiftDTO.
//  Copyright (c) 2016 Farbflash. All rights reserved.

// DO NOT EDIT THIS FILE!
// This file was automatically generated from a xcmodel file (CoreData XML Scheme)
// Edit the source coredata model (in the CoreData editor) and then use the SwiftDTO
// to create the corresponding DTO source files automatically

import Foundation

public struct Segment: JSOBJSerializable, DictionaryConvertible, CustomStringConvertible {

    // DTO properties:
    public let endTime: Date?
    public let geom: GeographicPosition?
    public let len: Int?
    public let metaDataRecs: MetaDataRecord?
    public let startTime: Date?
    public let tfcMode: TrafficMode?

    // Default initializer:
    public init(endTime: Date?, geom: GeographicPosition?, len: Int?, metaDataRecs: MetaDataRecord?, startTime: Date?, tfcMode: TrafficMode?) {
        self.endTime = endTime
        self.geom = geom
        self.len = len
        self.metaDataRecs = metaDataRecs
        self.startTime = startTime
        self.tfcMode = tfcMode
    }

    // Object creation using JSON dictionary representation from NSJSONSerializer:
    public init?(jsonData: JSOBJ?) {
        guard let jsonData = jsonData else { return nil }
        endTime = dateFromAny(jsonData["endTime"])
        if let val = Poi(jsonData: jsonData["geom"] as? JSOBJ) { self.geom = val }
        else { geom = nil }
        len = jsonData["len"] as? Int
        if let val = MetaDataRecord(jsonData: jsonData["metaDataRecs"] as? JSOBJ) { self.metaDataRecs = val }
        else { metaDataRecs = nil }
        startTime = dateFromAny(jsonData["startTime"])
        if let val = TrafficMode(jsonData: jsonData["tfcMode"] as? JSOBJ) { self.tfcMode = val }
        else { tfcMode = nil }

        #if DEBUG
            DTODiagnostics.analize(jsonData: jsonData, expectedKeys: allExpectedKeys, inClassWithName: "Segment")
        #endif
    }

    // all expected keys (for diagnostics in debug mode):
    public var allExpectedKeys: Set<String> {
        return Set(["endTime", "geom", "len", "metaDataRecs", "startTime", "tfcMode"])
    }

    // dictionary representation (for use with NSJSONSerializer or as parameters for URL request):
    public var jsobjRepresentation: JSOBJ {
        var jsonData = JSOBJ()
        if endTime != nil { jsonData["endTime"] = stringFromDate(endTime!) }
        if geom != nil { jsonData["geom"] = geom!.jsobjRepresentation }
        if len != nil { jsonData["len"] = len! }
        if metaDataRecs != nil { jsonData["metaDataRecs"] = metaDataRecs!.jsobjRepresentation }
        if startTime != nil { jsonData["startTime"] = stringFromDate(startTime!) }
        if tfcMode != nil { jsonData["tfcMode"] = tfcMode!.jsobjRepresentation }
        return jsonData
    }

    // printable protocol conformance:
    public var description: String { return "\(jsonString())" }

    // pretty print JSON string representation:
    public func jsonString(paddingPrefix prefix: String = "", printNulls: Bool = false) -> String {
        var returnString = "{\n"

        if let endTime = endTime { returnString.append("    \(prefix)\"endTime\": \"\(stringFromDate(endTime))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"endTime\": null,\n") }

        if let geom = geom { returnString.append("    \(prefix)\"geom\": \("\(geom.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"geom\": null,\n") }

        if let len = len { returnString.append("    \(prefix)\"len\": \(len),\n") }
        else if printNulls { returnString.append("    \(prefix)\"len\": null,\n") }

        if let metaDataRecs = metaDataRecs { returnString.append("    \(prefix)\"metaDataRecs\": \("\(metaDataRecs.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"metaDataRecs\": null,\n") }

        if let startTime = startTime { returnString.append("    \(prefix)\"startTime\": \"\(stringFromDate(startTime))\",\n") }
        else if printNulls { returnString.append("    \(prefix)\"startTime\": null,\n") }

        if let tfcMode = tfcMode { returnString.append("    \(prefix)\"tfcMode\": \("\(tfcMode.jsonString(paddingPrefix: "\(prefix)    ", printNulls: printNulls))"),\n") }
        else if printNulls { returnString.append("    \(prefix)\"tfcMode\": null,\n") }


        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: "\n"))
        returnString = returnString.trimmingCharacters(in: CharacterSet(charactersIn: ","))
        returnString += "\n\(prefix)}"
        return returnString
    }
}